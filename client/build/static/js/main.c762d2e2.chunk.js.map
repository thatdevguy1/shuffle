{"version":3,"sources":["components/Header/Header.js","components/User/Icons.js","components/Wheel/Wheel.js","components/Option/Option.js","components/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Icons","icon","userName","Wheel","state","icons","wheelColors","winningIcon","winningIconPosition","randomIcons","tempArray","i","random","Math","floor","push","_this","console","log","concat","setState","winningInfo","this","nextProp","spin","styles","transition","transform","iconElements","map","value","User_Icons","key","uuidv","join","style","React","Component","Option","type","id","name","onClick","click","Results","msgShow","_this2","showMsg","setTimeout","win","App","loggedIn","animate","colorChoice","winnerHandler","optionHandler","spinHandler","components_Header_Header","components_Wheel_Wheel","components_Option_Option","components_Results_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c762d2e2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\"\n\nconst Header = (props) => {\n    return(\n        <div className=\"header\">\n            Welcome to imba shuffles\n        </div>\n    );\n};\n\nexport default (Header);","import React from \"react\"\n\nconst Icons = (props)=>{\n    let icon;\n    //set class of different color based on some user id\n    switch(props.userName){\n        case(\"green\") : icon = <div className=\"icon green\"></div>\n            break;\n        case(\"pink\") : icon = <div className=\"icon pink\"></div>\n            break;\n        case(\"black\") : icon = <div className=\"icon black\"></div>\n            break;\n        default: icon = <div className=\"icon grey\"></div>\n    }\n\n    return icon;\n    \n}\n\nexport default (Icons);","import React from \"react\";\nimport Icons from \"../User/Icons\"\nimport uuidv from \"uuid/v4\";\nimport \"./Wheel.css\";\n\n\nclass Wheel extends React.Component{\n    state = {\n        icons: [\"green\", \"pink\", \"black\"],\n        wheelColors: [],\n        winningIcon: 0,\n        winningIconPosition: 0\n    };\n\n    //set the game up when the component mounts\n    componentWillMount(){\n        this.randomIcons();\n    };\n\n    //reset the game when props are recieved, This will be triggered when the spin state changes in the app.js\n    //checks to see if the state change indicates that the animation is over which in turn reveals the winning color\n    componentWillReceiveProps(nextProp){\n        if(nextProp.spin === false && nextProp.spin !== this.props.spin){\n            this.randomIcons();\n        }\n    }; \n\n    //creates a random array of colors based on numbers from 0 - 3 which coincides with colors.\n    //a winning color is predetermined by this function\n    //the winning colors position is determined for the spin animation to correctly spin to the right position\n    //everything is saved in state\n    randomIcons = () => {\n        let tempArray = [];\n        for(var i = 0; i < 13; i++){\n            let random = Math.floor(Math.random() * Math.floor(3));\n            tempArray.push(this.state.icons[random]);\n            console.log(random);\n        };\n\n        let winningIcon = Math.floor(Math.random() * 14);\n        let winningIconPosition;\n\n        if(winningIcon > 0){\n            winningIconPosition = 3304 + (winningIcon * 56);\n        }else{\n            winningIconPosition = 3304;\n        };\n        \n        console.log(`winning Icon ${winningIcon} `);\n\n        this.setState({\n            wheelColors: tempArray,\n            winningIcon: winningIcon, \n            winningIconPosition: winningIconPosition\n        });\n\n        this.props.winningInfo(tempArray[winningIcon]);\n\n    };\n\n    render(){\n        //styles is used for a dynamic transform value. This lets the animation to spin to a different position based on \n        //the predetermined position\n        var styles = {\n                transition: '4s cubic-bezier(.68,.21,.01,1.1)',\n                transform: `translateX(-${this.state.winningIconPosition}px)`\n            };\n\n        var spin = [\"iconWrap\", \"\"];\n        \n        //genereates the icons based on the random array of colors\n        let iconElements = this.state.wheelColors.map((value)=>{\n            return <Icons key={uuidv()} className = \"icon\" userName = {value} />\n        });\n\n        return(\n            <div className=\"wheel\">\n                <div className=\"selectionBox\" ></div>\n                <div className={spin.join(\" \")} style={(this.props.spin) ? styles : {}} >\n                    {iconElements}\n                    {iconElements}\n                    {iconElements}\n                    {iconElements}\n                    {iconElements}\n                    {iconElements}\n                    {iconElements}\n                </div>\n            </div>\n        );\n    };\n};\n\nexport default (Wheel);","import React from \"react\"\nimport \"./Option.css\"\n\nconst Option = (props)=>{\n    \n    return(\n        <div className=\"option\">\n            <h3>Choose Your Lucky Color</h3>\n            <div className=\"greenOption\">\n                <input type=\"radio\" id=\"green\" name=\"optionSelect\" onClick={()=>{props.click(\"green\")}} value=\"green\" />\n                <label>Green</label>\n            </div>\n            <div className=\"blackOption\">\n                <input type=\"radio\" id=\"black\" name=\"optionSelect\" onClick={()=>{props.click(\"black\")}} value=\"black\" />\n                <label>Black</label>\n            </div>\n            <div className=\"pinkOption\">  \n                <input type=\"radio\" id=\"pink\" name=\"optionSelect\" onClick={()=>{props.click(\"pink\")}} value=\"pink\" />\n                <label>Pink</label>\n            </div>\n        </div>\n    );\n    \n}\n\nexport default (Option);","import React, {Component} from \"react\"\nimport './Results.css'\n\nclass Results extends Component{\n    state ={\n        msgShow: false\n    };\n\n    componentWillReceiveProps(props){\n        if(props.showMsg === true){\n            this.setState({msgShow: true});\n            setTimeout(()=>{\n                this.setState({\n                    msgShow: false\n                });\n            }, 3000);\n        };        \n    };\n\n    render(){ \n        let msg = <h1 className={this.state.msgShow ? 'showResult' : 'showNone'}> {this.props.win ? 'YOU WIN!' : 'YOU LOSE!'} </h1>;\n        return msg;\n    };\n};\n\nexport default (Results);","import React, {Component} from 'react';\nimport Header from \"./components/Header/Header\"\nimport Wheel from \"./components/Wheel/Wheel\"\nimport Option from \"./components/Option/Option\"\nimport Results from \"./components/Results/Results\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    loggedIn: true,\n    animate: false,\n    spin: false,\n    colorChoice: \"\",\n    winningIcon: \"\",\n    win: false,\n    showMsg: false\n  };\n\n  winnerHandler = (winningIcon) => {\n    this.setState({\n      winningIcon: winningIcon\n    }, ()=>{\n      \n    });\n    console.log(`the winning icon is ${winningIcon}`)\n  };\n\n  //Sets the state of the users choice of color\n  optionHandler = (colorChoice) => {\n    this.setState({\n      colorChoice: colorChoice\n    }, ()=>{console.log(this.state.colorChoice)});\n  };\n\n  //handles the spin state to control animation. Checks if animation is in progress to stop the user from pressing the spin button\n  //while the action is in progress\n  spinHandler = () => {\n      if(!this.state.spin === true){\n      this.setState({\n        spin: true\n      });\n      setTimeout(()=>{\n        this.state.winningIcon === this.state.colorChoice ? this.setState({win:true, showMsg: true}) : this.setState({win:false, showMsg: true});\n\n      }, 4000);\n      setTimeout(()=> {\n        this.setState({\n          spin:false,\n          showMsg: false\n        });\n      }, 8000);\n    };\n  };\n\n  render(){\n    return( \n      <div className=\"App\">\n        <Header />\n        <Wheel spin={this.state.spin} colorChoice={this.state.colorChoice} winningInfo={this.winnerHandler}/>\n        <div className=\"botWrapper\">\n          <Option click={this.optionHandler} />\n          <button id=\"spinBtn\" className=\"spin\" onClick={ this.spinHandler } >Spin!</button>\n        </div>\n        <Results win={this.state.win} showMsg={this.state.showMsg}/>\n      </div>\n    )};\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}